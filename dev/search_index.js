var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = TechnicalIndicatorCharts","category":"page"},{"location":"api/#TechnicalIndicatorCharts","page":"API","title":"TechnicalIndicatorCharts","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Documentation for TechnicalIndicatorCharts.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [TechnicalIndicatorCharts]","category":"page"},{"location":"api/#TechnicalIndicatorCharts.abbrev-Tuple{Dates.Period}","page":"API","title":"TechnicalIndicatorCharts.abbrev","text":"abbrev(p::Period)\n\nReturn an abbreviated string representation of the given period.\n\nExample\n\nabbrev(Hour(4)) # \"4h\"\nabbrev(Day(1))  # \"1d\"\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.chart-Tuple{Any, Any}","page":"API","title":"TechnicalIndicatorCharts.chart","text":"  chart(name, tf; indicators, visuals)\n\nConstruct a Chart instance configured with the given indicators and visual parameters.\n\nExample\n\njulia> golden_cross = chart(\n    \"BTCUSD\", Hour(4);\n    indicators = [\n        SMA{Float64}(;period=50),\n        SMA{Float64}(;period=200)\n    ],\n    visuals = [\n        Dict(\n            :label_name => \"SMA 50\",\n            :line_color => \"#E072A4\",\n            :line_width => 2\n        ),\n        Dict(\n            :label_name => \"SMA 200\",\n            :line_color => \"#3D3B8E\",\n            :line_width => 5\n        )\n    ]\n)\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.extract_value-Tuple{Any}","page":"API","title":"TechnicalIndicatorCharts.extract_value","text":"extract_value(value) -> Vector{Any}\n\n\nExtract values out of an indicators value struct.  This is only intended to be used for indicators that emit multiple values per tick.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.indicator_fields-Tuple{OnlineTechnicalIndicators.TechnicalIndicatorSingleOutput}","page":"API","title":"TechnicalIndicatorCharts.indicator_fields","text":"Return a tuple of symbol names to be used for the output of ind.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.indicator_fields_values-Tuple{OnlineTechnicalIndicators.TechnicalIndicatorMultiOutput}","page":"API","title":"TechnicalIndicatorCharts.indicator_fields_values","text":"indicator_fields_values(\n    ind::OnlineTechnicalIndicators.TechnicalIndicatorMultiOutput\n) -> Any\n\n\nExtract values from an indicator instance.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.ismultiinput-Tuple{OnlineTechnicalIndicators.TechnicalIndicator}","page":"API","title":"TechnicalIndicatorCharts.ismultiinput","text":"This is a wrapper around OnlineTechnicalIndicators.ismultiinput that takes any instance of a TechnicalIndicator and digs out its unparametrized type before running the original ismultiinput method.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.ismultioutput-Tuple{OnlineTechnicalIndicators.TechnicalIndicator}","page":"API","title":"TechnicalIndicatorCharts.ismultioutput","text":"This is a wrapper around OnlineTechnicalIndicators.ismultioutput that takes any instance of a TechnicalIndicator and digs out its unparametrized type before running the original ismultioutput method.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.make_panel-Tuple{LightweightCharts.LWCChart}","page":"API","title":"TechnicalIndicatorCharts.make_panel","text":"make_panel(\n    chart::LightweightCharts.LWCChart\n) -> LightweightCharts.LWCPanel\n\n\nWrap a single LWCChart in a panel.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.make_panel-Tuple{Vector}","page":"API","title":"TechnicalIndicatorCharts.make_panel","text":"make_panel(plots::Vector) -> LightweightCharts.LWCPanel\n\n\nWrap a Vector of LWCCharts in a panel.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.merge_candle!-Tuple{Union{Missing, Candle}, Union{Candle, DataFrames.DataFrameRow}}","page":"API","title":"TechnicalIndicatorCharts.merge_candle!","text":"merge_candle!(\n    last_candle::Union{Missing, Candle},\n    c::Union{Candle, DataFrames.DataFrameRow}\n) -> Candle\n\n\nIf last candle is not provided, construct a new candle with the given OHLCV data. If last candle is provided, mutate last_candle such that it's HLCV are updated. When tw candles are passed in, it's assumed they have the same timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.push_new_candle!-Tuple{Chart, Candle}","page":"API","title":"TechnicalIndicatorCharts.push_new_candle!","text":"push_new_candle!(\n    chart::Chart,\n    c::Candle\n) -> DataFrames.DataFrame\n\n\nThis is meant to be called on timeframe boundaries to onto the chart's dataframe.  It also does indicator calculation at this time.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.update!-Tuple{Chart, Candle}","page":"API","title":"TechnicalIndicatorCharts.update!","text":"update!(chart::Chart, c::Candle) -> Union{Nothing, Candle}\n\n\nUpdate a chart with a candle. When a candle is completed, return it. Otherwise, return nothing on update.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.update_last_candle!-Tuple{Chart, Candle}","page":"API","title":"TechnicalIndicatorCharts.update_last_candle!","text":"update_last_candle!(chart::Chart, c::Candle) -> Float64\n\n\nThis updates the HLCV values of the last row of the chart's DataFrame when we're not at a chart.tf boundary.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{Any, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    unimplemented,\n    opts,\n    df::DataFrames.DataFrame\n) -> LightweightCharts.LWCChart\n\n\nThis is a visualize method that's a catch-all for indicators that haven't had a visualize method made for them yet.  For now, it returns missing.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{Chart}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    chart::Chart;\n    min_height,\n    mode,\n    up_color,\n    down_color\n) -> LightweightCharts.LWCLayout\n\n\nReturn an LWCLayout that visualizes all the components in chart appropriately.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{DataFrames.DataFrame, Any}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    df::DataFrames.DataFrame,\n    opts\n) -> LightweightCharts.LWCChart\n\n\nVisualize a DataFrame using lwc_candlestick.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.BB, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    bb::OnlineTechnicalIndicators.BB,\n    opts,\n    df::DataFrames.DataFrame\n) -> Vector{LightweightCharts.LWCChart}\n\n\nVisualize Bollinger Bands using 3 lwc_lines.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.EMA, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    ema::OnlineTechnicalIndicators.EMA,\n    opts,\n    df::DataFrames.DataFrame\n) -> LightweightCharts.LWCChart\n\n\nVisualize EMA using 1 lwc_line.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.HMA, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    hma::OnlineTechnicalIndicators.HMA,\n    opts,\n    df::DataFrames.DataFrame\n) -> LightweightCharts.LWCChart\n\n\nVisualize HMA using 1 lwc_line.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.RSI, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    rsi::OnlineTechnicalIndicators.RSI,\n    opts,\n    df::DataFrames.DataFrame\n) -> LightweightCharts.LWCChart\n\n\nVisualize RSI using 1 lwc_line.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.SMA, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    sma::OnlineTechnicalIndicators.SMA,\n    opts,\n    df::DataFrames.DataFrame\n) -> LightweightCharts.LWCChart\n\n\nReturn an lwc_line for visualizing an SMA indicator.\n\n\n\n\n\n","category":"method"},{"location":"api/#TechnicalIndicatorCharts.visualize-Tuple{OnlineTechnicalIndicators.StochRSI, Any, DataFrames.DataFrame}","page":"API","title":"TechnicalIndicatorCharts.visualize","text":"visualize(\n    srsi::OnlineTechnicalIndicators.StochRSI,\n    opts,\n    df::DataFrames.DataFrame\n) -> Vector{LightweightCharts.LWCChart}\n\n\nVisualize StochRSI using 2 lwc_lines.\n\n\n\n\n\n","category":"method"},{"location":"#TechnicalIndicatorCharts","page":"Home","title":"TechnicalIndicatorCharts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A library for  visualizing OnlineTechnicalIndicators.jl  using LightweightCharts.jl","category":"page"},{"location":"#First,-what-is-a-chart?","page":"Home","title":"First, what is a chart?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Chart is a mutable struct that has:","category":"page"},{"location":"","page":"Home","title":"Home","text":"a name (typically of the asset like \"BTCUSD\" or \"AAPL\")\na timeframe (which controls how much time each candle on the chart represents)\na DataFrame to hold OHLCV values and indicator values\na Vector of OnlineTechnicalIndicators to display on the chart.\nanother Vector of display configuration for each indicator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you were to go to TradingView and look at a chart,  imagine what kind of data structure would be required to represent it in memory. That's what the Chart struct aims to be.","category":"page"},{"location":"#Constructing-a-Chart","page":"Home","title":"Constructing a Chart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Charts are constructed using the chart(name, timeframe; indicators, visuals) function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OnlineTechnicalIndicators\nusing LightweightCharts\nusing TechnicalIndicatorCharts\n\n# If you just want candles, you can omit `indicators` and `visuals`.\njust_candles_1m = chart(\"BTCUSD\", Minute(1))","category":"page"},{"location":"#Updating-a-Chart","page":"Home","title":"Updating a Chart","text":"","category":"section"},{"location":"#Visualizing-a-Chart","page":"Home","title":"Visualizing a Chart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"That's all there is to it.","category":"page"}]
}
